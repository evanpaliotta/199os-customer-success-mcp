name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.7.1'

jobs:
  # ==========================================================================
  # Code Quality and Linting
  # ==========================================================================
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pylint

      - name: Run black (format check)
        run: black --check src/ tests/
        continue-on-error: true

      - name: Run isort (import ordering)
        run: isort --check-only src/ tests/
        continue-on-error: true

      - name: Run flake8 (linting)
        run: flake8 src/ tests/ --max-line-length=120 --ignore=E203,W503
        continue-on-error: true

      - name: Run pylint (static analysis)
        run: |
          pip install -r requirements.txt
          pylint src/ --disable=C0111,C0103,R0913,R0914
        continue-on-error: true

  # ==========================================================================
  # Security Scanning
  # ==========================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run bandit (security linting)
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Run safety (dependency vulnerability check)
        run: safety check --json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json

  # ==========================================================================
  # Secret Scanning
  # ==========================================================================
  secrets-scan:
    name: Scan for Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scan

      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==========================================================================
  # Unit Tests
  # ==========================================================================
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock

      - name: Run unit tests
        run: |
          pytest tests/unit/ \
            -v \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=junit/test-results-${{ matrix.python-version }}.xml
        env:
          ENVIRONMENT: test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-unit-${{ matrix.python-version }}
          path: |
            junit/
            htmlcov/
            coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.10'
        with:
          file: ./coverage.xml
          flags: unit
          name: unit-tests

  # ==========================================================================
  # Integration Tests
  # ==========================================================================
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: cs_mcp_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock

      - name: Run database migrations
        run: |
          alembic upgrade head
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: cs_mcp_test
          DB_USER: test_user
          DB_PASSWORD: test_password

      - name: Run integration tests
        run: |
          pytest tests/integration/ \
            -v \
            --cov=src \
            --cov-report=xml \
            --junitxml=junit/integration-results.xml
        env:
          ENVIRONMENT: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: cs_mcp_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-integration
          path: |
            junit/
            coverage.xml

  # ==========================================================================
  # E2E Tests
  # ==========================================================================
  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: cs_mcp_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run E2E tests
        run: |
          pytest tests/e2e/ \
            -v \
            --junitxml=junit/e2e-results.xml
        env:
          ENVIRONMENT: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: cs_mcp_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-e2e
          path: junit/

  # ==========================================================================
  # Build and Validate
  # ==========================================================================
  build:
    name: Build and Validate
    runs-on: ubuntu-latest
    needs: [lint, security, test-unit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate Python syntax
        run: |
          python -m py_compile src/**/*.py

      - name: Check for syntax errors
        run: |
          find src -name "*.py" -exec python -m py_compile {} \;

      - name: Build package
        run: |
          python -m pip install build
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # ==========================================================================
  # Docker Build
  # ==========================================================================
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: cs-mcp:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================================================
  # Test Summary
  # ==========================================================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, test-e2e]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/junit/*.xml
          check_name: Test Results

      - name: Test summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "All tests completed. Check artifacts for detailed results." >> $GITHUB_STEP_SUMMARY
